{
  "_args": [
    [
      {
        "raw": "bezier-easing@^2.0.3",
        "scope": null,
        "escapedName": "bezier-easing",
        "name": "bezier-easing",
        "rawSpec": "^2.0.3",
        "spec": ">=2.0.3 <3.0.0",
        "type": "range"
      },
      "/Users/Sameul/Desktop/Website/portfolio/node_modules/vue-scrollto"
    ]
  ],
  "_from": "bezier-easing@>=2.0.3 <3.0.0",
  "_id": "bezier-easing@2.0.3",
  "_inCache": true,
  "_location": "/bezier-easing",
  "_nodeVersion": "4.4.0",
  "_npmOperationalInternal": {
    "host": "packages-13-west.internal.npmjs.com",
    "tmp": "tmp/bezier-easing-2.0.3.tgz_1457950304293_0.2819326492026448"
  },
  "_npmUser": {
    "name": "gre",
    "email": "renaudeau.gaetan@gmail.com"
  },
  "_npmVersion": "2.14.20",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bezier-easing@^2.0.3",
    "scope": null,
    "escapedName": "bezier-easing",
    "name": "bezier-easing",
    "rawSpec": "^2.0.3",
    "spec": ">=2.0.3 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/vue-scrollto"
  ],
  "_resolved": "https://registry.npmjs.org/bezier-easing/-/bezier-easing-2.0.3.tgz",
  "_shasum": "cb493fddb7f8920ecca00973344ce0518885f17e",
  "_shrinkwrap": null,
  "_spec": "bezier-easing@^2.0.3",
  "_where": "/Users/Sameul/Desktop/Website/portfolio/node_modules/vue-scrollto",
  "author": {
    "name": "Gaëtan Renaudeau",
    "email": "renaudeau.gaetan@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/gre/bezier-easing/issues"
  },
  "dependencies": {},
  "description": "BezierEasing provides Cubic Bezier Curve easing which generalizes easing functions exactly like in CSS Transitions.",
  "devDependencies": {
    "assert": "^1.3.0",
    "benchmark": "^2.1.0",
    "browserify": "^13.0.0",
    "budo": "^8.1.0",
    "mocha": "^2.4.5",
    "uglify-js": "^2.6.2"
  },
  "directories": {},
  "dist": {
    "shasum": "cb493fddb7f8920ecca00973344ce0518885f17e",
    "tarball": "https://registry.npmjs.org/bezier-easing/-/bezier-easing-2.0.3.tgz"
  },
  "files": [
    "src",
    "dist"
  ],
  "gitHead": "18f06f5d058184690f5975a243e5bcfcba2e89c4",
  "homepage": "https://github.com/gre/bezier-easing#readme",
  "keywords": [
    "cubic-bezier",
    "bezier",
    "easing",
    "interpolation",
    "animation",
    "timing",
    "timing-function"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "gre",
      "email": "renaudeau.gaetan@gmail.com"
    }
  ],
  "name": "bezier-easing",
  "optionalDependencies": {},
  "readme": "bezier-easing [![Build Status](https://travis-ci.org/gre/bezier-easing.png)](https://travis-ci.org/gre/bezier-easing)\n===\n\nBezierEasing provides **Cubic Bezier** Curve easing which generalizes easing functions (ease-in, ease-out, ease-in-out, ...any other custom curve) exactly like in CSS Transitions.\n\nImplementing efficient lookup is not easy because it implies projecting\nthe X coordinate to a Bezier Curve.\nThis micro library uses fast heuristics (involving dichotomic search, newton-raphson, sampling) to focus on **performance** and **precision**.\n\n> It is heavily based on implementations available in Firefox and Chrome (for the CSS transition-timing-function property).\n\nUsage\n-------\n\n```javascript\nvar easing = BezierEasing(0, 0, 1, 0.5);\n// easing allows to project x in [0.0,1.0] range onto the bezier-curve defined by the 4 points (see schema below).\nconsole.log(easing(0.0)); // 0.0\nconsole.log(easing(0.5)); // 0.3125\nconsole.log(easing(1.0)); // 1.0\n```\n\n(this schema is from the CSS spec)\n\n[![TimingFunction.png](http://www.w3.org/TR/css3-transitions/TimingFunction.png)](http://www.w3.org/TR/css3-transitions/#transition-timing-function-property)\n\nInstall\n-------\n\n[![npm install bezier-easing](https://nodei.co/npm/bezier-easing.png)](http://npmjs.org/package/bezier-easing)\n\nIt is the equivalent to [CSS Transitions' `transition-timing-function`](http://www.w3.org/TR/css3-transitions/#transition-timing-function-property).\n\n\nIn the same way you can define in CSS `cubic-bezier(0.42, 0, 0.58, 1)`,\nwith BezierEasing, you can define it using `BezierEasing(0.42, 0, 0.58, 1)` which have the `` function taking an X and computing the Y interpolated easing value (see schema).\n\nLicense\n-------\n\nMIT License.\n\nTests\n---\n\n[![Build Status](https://travis-ci.org/gre/bezier-easing.png)](https://travis-ci.org/gre/bezier-easing)\n\n```\nnpm test\n```\n\nSee also\n===\n\n- [https://github.com/gre/bezier-easing-editor/](https://github.com/gre/bezier-easing-editor/)\n\nWho use it?\n===\n\n- [React Native](https://github.com/facebook/react-native/blob/master/Libraries/Animated/src/bezier.js)\n- [Apple®](http://images.apple.com/v/mac-pro/home/b/scripts/overview.js) :)\n- [Velocity.js](https://github.com/julianshapiro/velocity)\n- [GLSL.io](http://glsl.io/) and [Diaporama Maker](https://github.com/gre/diaporama-maker)\n\nMore informations\n-----------------\n\nImplementation based on this [article](http://greweb.me/2012/02/bezier-curve-based-easing-functions-from-concept-to-implementation/).\n\nContributing\n------------\n\nYou need a `node` installed.\n\nInstall the deps:\n\n```\nnpm install\n```\n\nThe library is in `index.js`.\n\nEnsure any modication will:\n- keep validating the tests (run `npm test`)\n- not bring performance regression (compare with `npm run benchmark` – don't rely 100% on its precision but it still helps to notice big gaps)\n- Run the visual example: `npm run visual`\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/gre/bezier-easing.git"
  },
  "scripts": {
    "benchmark": "node benchmark.js",
    "build-dev": "browserify --standalone BezierEasing src/index.js > dist/bezier-easing.js",
    "build-prod": "browserify --standalone BezierEasing src/index.js | uglifyjs -cm > dist/bezier-easing.min.js",
    "prepublish": "rm -rf dist && mkdir -p dist && npm run build-dev && npm run build-prod",
    "test": "mocha",
    "visual": "budo visual-demo.js"
  },
  "version": "2.0.3"
}
